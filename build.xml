<?xml version="1.0" encoding="utf-8" ?>
<project name="CI-Eye" default="snapshot" basedir=".">

    <property name="target.version" value="0.2.1"/>

    <property name="build.dir"      value="build"/>
    <property name="lib.dir"        value="vendor/lib"/>
    <property name="jslib.dir"      value="vendor/jslib"/>
    <property name="buildlib.dir"   value="vendor/buildlib"/>
    <property name="built-main.dir" value="${build.dir}/main"/>
    <property name="built-test.dir" value="${build.dir}/test"/>

    <tstamp><format property="build.number" pattern="yyyyMMddHHmmss" timezone="GMT"/></tstamp>
    <tstamp><format property="build.timestamp" pattern="yyyy-MM-dd HH:mm:ss" timezone="GMT"/></tstamp>

    <path id="compile-main.req">
        <fileset dir="${lib.dir}" includes="**/*.jar"/>
    </path>

    <path id="run-main.req">
        <path refid="compile-main.req"/>
        <pathelement location="${built-main.dir}"/>
    </path>

    <path id="compile-test.req">
        <path refid="run-main.req"/>
        <fileset dir="${buildlib.dir}" includes="**/*.jar"/>
    </path>

    <macrodef name="compile-module">
        <attribute name="srcdir"/>
        <attribute name="destdir"/>
        <attribute name="classpathref"/>

        <sequential>
            <javac srcdir="@{srcdir}/java"
                   includes="**"
                   includeantruntime="false"
                   encoding="utf-8"
                   destdir="@{destdir}"
                   source="1.5"
                   target="1.5"
                   debug="true"
                   debuglevel="lines,source">
                <classpath refid="@{classpathref}"/>
            </javac>

            <copy todir="@{destdir}">
                <fileset dir="@{srcdir}/java" excludes="**/*.java"/>
                <fileset dir="@{srcdir}/webapp"/>
            </copy>
        </sequential>
    </macrodef>

    <target name="version-for-snapshot" unless="version.label">
        <property name="version.label" value="${target.version}-SNAPSHOT-${build.number}"/>
    </target>

    <target name="version-for-release" unless="version.label">
        <property name="version.label" value="${target.version}"/>
    </target>

    <target name="version" depends="version-for-snapshot,version-for-release">
        <echo message="Building version ${version.label}"/>
    </target>

    <target name="clean" description="Clean this project">
        <delete dir="${build.dir}" failonerror="false"/>
    </target>

    <target name="prepare">
        <mkdir dir="${build.dir}"/>
    </target>

    <target name="compile-main" depends="prepare">
        <mkdir dir="${built-main.dir}"/>
        <compile-module srcdir="src/main" destdir="${built-main.dir}" classpathref="compile-main.req"/>
        <copy todir="${built-main.dir}">
            <fileset dir="${jslib.dir}"/>
        </copy>
    </target>

    <target name="compile-test" depends="prepare,compile-main">
        <mkdir dir="${built-test.dir}"/>
        <compile-module srcdir="src/test" destdir="${built-test.dir}" classpathref="compile-test.req"/>
    </target>

    <target name="compile" depends="compile-main,compile-test" description="Compile all this project's source"/>

    <target name="jar-main" depends="clean,compile,version">
        <jar destfile="${build.dir}/ci-eye-${version.label}.jar">
            <fileset dir="${built-main.dir}"/>
            <fileset dir="${basedir}" includes="LICENSE NOTICE README"/>

            <zipfileset src="${lib.dir}/commons-codec-1.4.jar" excludes="**/META-INF/**"/>
            <zipfileset src="${lib.dir}/commons-io-2.1.jar" excludes="**/META-INF/**"/>
            <zipfileset src="${lib.dir}/commons-logging-1.1.1.jar" excludes="**/META-INF/**"/>
            <zipfileset src="${lib.dir}/gson-2.1.jar" excludes="**/META-INF/**"/>
            <zipfileset src="${lib.dir}/guava-11.0.1.jar" excludes="**/META-INF/**"/>
            <zipfileset src="${lib.dir}/httpclient-4.1.2.jar" excludes="**/META-INF/**"/>
            <zipfileset src="${lib.dir}/httpclient-cache-4.1.2.jar" excludes="**/META-INF/**"/>
            <zipfileset src="${lib.dir}/httpcore-4.1.4.jar" excludes="**/META-INF/**"/>
            <zipfileset src="${lib.dir}/httpcore-nio-4.1.4.jar" excludes="**/META-INF/**"/>
            <zipfileset src="${lib.dir}/httpmime-4.1.2.jar" excludes="**/META-INF/**"/>
            <zipfileset src="${lib.dir}/simple-4.1.21.jar" excludes="**/META-INF/**"/>

            <manifest>
                <attribute name="Main-Class" value="org.netmelody.cieye.CiEye"/>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Implementation-Vendor" value="netmelody.org"/>
                <attribute name="Implementation-Title" value="${ant.project.name}"/>
                <attribute name="Implementation-Version" value="${version.label}"/>
                <attribute name="Built-Date" value="${build.timestamp}"/>
            </manifest>
        </jar>
    </target>

    <target name="jar-test" depends="clean,compile,version">
        <jar destfile="${build.dir}/ci-eye-tests-${version.label}.jar">
            <fileset dir="${built-test.dir}"/>
            <fileset dir="${basedir}" includes="LICENSE NOTICE README.md"/>

            <zipfileset src="${buildlib.dir}/hamcrest-all-1.3.0RC2.jar" excludes="**/META-INF/**"/>
            <zipfileset src="${buildlib.dir}/jmock-2.5.1.jar" excludes="**/META-INF/**"/>
            <zipfileset src="${buildlib.dir}/junit-dep-4.10.jar" excludes="**/META-INF/**"/>
            <zipfileset src="${buildlib.dir}/menodora-0.0.5.jar" excludes="**/META-INF/**"/>

            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Implementation-Vendor" value="netmelody.org"/>
                <attribute name="Implementation-Title" value="${ant.project.name} Tests"/>
                <attribute name="Implementation-Version" value="${version.label}"/>
                <attribute name="Built-Date" value="${build.timestamp}"/>
            </manifest>
        </jar>
    </target>

    <target name="jar" description="Create jar files" depends="jar-main,jar-test"/>

    <target name="test" description="Test this project" depends="jar">
        <property name="test-report.dir" value="${build.dir}/testreport"/>
        <mkdir dir="${test-report.dir}"/>

        <junit printsummary="yes" haltonfailure="yes" forkmode="once">
            <classpath>
              <pathelement location="${build.dir}/ci-eye-${version.label}.jar"/>
              <pathelement location="${build.dir}/ci-eye-tests-${version.label}.jar"/>
            </classpath>
            <formatter type="plain"/>
            <batchtest fork="yes" todir="${test-report.dir}">
                <zipfileset src="${build.dir}/ci-eye-tests-${version.label}.jar">
                    <include name="org/netmelody/cieye/**/*Test.class"/>
                </zipfileset>
            </batchtest>
        </junit>
    </target>

    <target name="dependency-check" depends="clean,jar" description="Perform dependency checks">
        <taskdef name="classycleDependencyCheck"
                 classname="classycle.ant.DependencyCheckingTask"
                 classpath="${buildlib.dir}/classycle-1.4.jar"/>
        
        <classycleDependencyCheck definitionFile="dependencies.ddf" failOnUnwantedDependencies="true">
            <!-- oh dear... classycle doesn't support zipfileset
            <zipfileset src="${build.dir}/ci-eye-${version.label}.jar">
                <include name="org/netmelody/cieye/**/*.class"/>
            </zipfileset>
            -->
            <fileset dir="${built-main.dir}" includes="**/*.class"/>
        </classycleDependencyCheck>
    </target>

    <target name="snapshot" description="Create a tested snapshot jar file" depends="test,dependency-check"/>
    <target name="release" description="Create a tested release jar file" depends="version-for-release,snapshot"/>
</project>